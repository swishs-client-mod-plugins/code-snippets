(self.webpackChunk=self.webpackChunk||[]).push([[1222],{1222:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});var r,o=n(5548),s=n(795),c=n(647);!function(e){e[e.JS=0]="JS",e[e.CSS=1]="CSS"}(r||(r={}));const i="src/snippets.json";let a,p={};const[{createToast:u},{showToast:l}]=s.Z.getByProps("createToast","showToast",{bulk:!0}),f=(e,t)=>{if(window.powercord?.api?.notices?.sendToast)return window.powercord.api.notices.sendToast(null,{content:e,timeout:t?2500:3500,type:t?"success":"danger",header:t?"Snippet Action Successful":"Snippet Action Unsuccessful"});l(u(e,t||2))},d=e=>{CodeSnippetsNative.writeFile(i,JSON.stringify(e,null,"\t"),(e=>{f("Error trying to write to the snippets file! Check console for more details."),o.Z.error("Error trying to write to the snippets file!",e),e=!0})),a?.()},S=s.Z.getByProps("getLocale"),h=()=>{const e=CodeSnippetsNative.readFile(i);return e?JSON.parse(e):{}},g=e=>{const t=h();return Object.keys(t).length&&t[e]?t[e]:{code:"",extension:"",enabled:!1}},y=async(e,t,n)=>{let r;try{r=await new Function(`\n        let Logger  = this.cs.logger;\n        let Patcher = this.cs.patcher;\n        let Webpack = this.cs.webpack;\n        let Manager = this.cs.manager;\n\n        return (async () => { ${CodeSnippetsNative.compile(t.code,t.extension)} })();\n      `)()}catch(t){return f(`Error running snippet ${e||"QuickRun"}! Check console for more details.`),o.Z.error(`Error running snippet ${e||"QuickRun"}!`,t)}return n??f(`Successfully ran ${e||"QuickRun"}!`,!0),o.Z.info(`Successfully ran ${e||"QuickRun"}!`,r?"":`Returned: ${r}`),a?.(),r},$=(e,t,n)=>{const r=((e={})=>Object.assign(document.createElement("style"),e))({textContent:e,id:`code-snippets-${t}`});return(n??document.head).appendChild(r),r},m={makeToast:f,cleanup:()=>{Object.keys(p).forEach((async e=>{try{await p[e](),delete p[e]}catch(t){f(`Error running the cleanup function for ${e}! Check console for more details.`),o.Z.error(`Error running the cleanup function for ${e}!`,t)}}))},setUpdate:e=>{a=e},getSnippets:h,getFirstSnippet:()=>Object.keys(h())?.[0],getSnippet:g,getScriptType:e=>{const t=g(e);return t.extension.endsWith("ss")?r.CSS:t.extension in c.Rw?r.JS:void 0},backupSnippets:()=>{const e=(new Date).toLocaleString(S.getLocale(),{hourCycle:"h24"}).replace(/[\/:]/g,"-").replace(", ","-");CodeSnippetsNative.writeFile(`src/backup-${e}.json`,JSON.stringify(h()),(e=>{f("Error trying to back up the snippets file! Check console for more details."),o.Z.error("Error trying to back up the snippets file!",e),e=!0})),f(`Successfully backed up snippets to backup-${e}.json!`,!0),o.Z.info(`Successfully backed up snippets to backup-${e}.json!`)},deleteSnippet:e=>{let t=h();try{delete t[e],p[e]?.()}catch(t){return f(`Error deleting snippet ${e}! Check console for more details.`),o.Z.error(`Error deleting snippet ${e}!`,t)}return d(t)},moveSnippet:(e,t)=>{let n=h();try{let r=n[e],o=Object.entries(n).filter((([t])=>t!==e));o.splice(t,0,[e,r]),n=Object.fromEntries(o)}catch(t){return f(`Error moving snippet ${e}! Check console for more details.`),o.Z.error(`Error moving snippet ${e}!`,t)}return d(n)},updateSnippet:(e,t)=>{let n=h();t=Object.assign(g(e),t);try{Object.assign(n,{[e]:t})}catch(t){return f(`Error writing snippet ${e}! Check console for more details.`),!0}return d(n)},renameSnippet:(e,t)=>{console.log(e,t);let n=h();try{let r=Object.keys(n).indexOf(e),o=Object.entries(n);o.splice(r,1,[t,n[e]]),n=Object.fromEntries(o)}catch(n){return f(`Error renaming snippet ${e} to ${t}! Check console for more details.`),o.Z.error(`Error renaming snippet ${e} to ${t}!`,n)}return d(n)},createSnippet:(e,t,n)=>{let r=h();try{Object.assign(r,{[e]:{code:"",enabled:n??!1,extension:t}})}catch(t){return f(`Error creating snippet ${e}! Check console for more details.`),o.Z.error(`Error creating snippet ${e}.`,t)}return d(r)},runCode:y,injectCSS:$,runSnippet:async(e,t,n)=>{if(!h()[e])return o.Z.warn(`Snippet ${e} does not exist!`);const s=g(e);if(await(p[e]?.(!0)),t===r.CSS){const t=$(CodeSnippetsNative.compile(s.code,s.extension),e);p[e]=n=>{t.remove(),delete p[e],n||f(`Successfully removed CSS for ${e}!`,!0),o.Z.info(`Successfully removed CSS for ${e}!`,t),a?.()},n||f(`Successfully loaded CSS for ${e}! Check console for node info.`,!0),o.Z.info(`Successfuly loaded CSS for ${e}!`,t)}else{const t=await y(e,s,n);"function"==typeof t&&(p[e]=async n=>{let r;try{r=await t(),delete p[e]}catch(t){return f(`Error running the cleanup function for ${e}! Check console for more details.`),o.Z.error(`Error running the cleanup function for ${e}!`,t)}n||f(`Successfully ran cleanup function for ${e}!`,!0),o.Z.info(`Successfully ran cleanup function for ${e}!`,r&&"function"!=typeof r?"":`Returned: ${r}`),a?.()})}a?.()},pullGist:async e=>{const t=await(await fetch(`https://api.github.com/gists/${e.id}`)).json();if(t.message)return Promise.reject("Gist does not exist!");return(t.files[e.name]?.content??t.files[Object.keys(t.files)[0]]?.content)||Promise.reject("Gist does not contain any files!")},ScriptType:r,get cleanups(){return p}}},647:(e,t,n)=>{n.d(t,{As:()=>c,Rw:()=>o,VS:()=>p,_v:()=>a,hI:()=>i,v_:()=>s});const r=(e,t)=>t.map((t=>`${e?`${e}-`:""}${Array.isArray(t)?t.join("-"):t}`)).join(" "),o=["js","ts","jsx","css","scss","sass"];function s(...e){return r("",e)}function c(...e){return`code-snippets-${r("",e)}`}function i(e){return(...t)=>r(`code-snippets-${e}`,t)}function a(e){return new Promise((t=>setTimeout(t,e)))}function p(e,t){e.forEach((e=>t?e[t]?.():e?.()))}}}]);
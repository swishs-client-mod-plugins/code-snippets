(self.webpackChunk=self.webpackChunk||[]).push([[1222],{1222:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5548);\n/* harmony import */ var _Webpack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(795);\n/* harmony import */ var _Utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(647);\nvar ScriptType;(function(ScriptType){ScriptType[ScriptType[\"JS\"]=0]=\"JS\";ScriptType[ScriptType[\"CSS\"]=1]=\"CSS\"})(ScriptType||(ScriptType={}));const PATH='src/snippets.json';let cleanups={};let update;const setUpdate=newUpdate=>{update=newUpdate};const[{createToast},{showToast}]=_Webpack__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"].getByProps */ .Z.getByProps('createToast','showToast',{bulk:true});const makeToast=(info,success)=>{if(window.powercord?.api?.notices?.sendToast)return window.powercord.api.notices.sendToast(null,{content:info,timeout:success?2500:3500,type:success?'success':'danger',header:success?'Snippet Action Successful':'Snippet Action Unsuccessful'});showToast(createToast(info,success||2))};const cleanup=()=>{Object.keys(cleanups).forEach(async key=>{try{await cleanups[key]();delete cleanups[key]}catch(error){makeToast(`Error running the cleanup function for ${key}! Check console for more details.`);_Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].error */ .Z.error(`Error running the cleanup function for ${key}!`,error)}})};const writeSnippets=snippets=>{let error1;CodeSnippetsNative.writeFile(PATH,JSON.stringify(snippets,null,'\\t'),error=>{makeToast(`Error trying to write to the snippets file! Check console for more details.`);_Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].error */ .Z.error('Error trying to write to the snippets file!',error);error=true});if(error1)return error1;update?.()};const i18n=_Webpack__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"].getByProps */ .Z.getByProps('getLocale');const backupSnippets=()=>{const timestamp=new Date().toLocaleString(i18n.getLocale(),{hourCycle:'h24'}).replace(/[\\/:]/g,'-').replace(', ','-');let error2;CodeSnippetsNative.writeFile(`src/backup-${timestamp}.json`,JSON.stringify(getSnippets()),error=>{makeToast(`Error trying to back up the snippets file! Check console for more details.`);_Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].error */ .Z.error('Error trying to back up the snippets file!',error);error=true});if(error2)return;makeToast(`Successfully backed up snippets to backup-${timestamp}.json!`,true);_Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].info */ .Z.info(`Successfully backed up snippets to backup-${timestamp}.json!`)};const getScriptType=name=>{const snippet=getSnippet(name);if(snippet.extension.endsWith('ss'))return ScriptType.CSS;else if(snippet.extension in _Utilities__WEBPACK_IMPORTED_MODULE_2__/* .extensions */ .Rw)return ScriptType.JS};const getSnippets=()=>{const snippets=CodeSnippetsNative.readFile(PATH);return snippets?JSON.parse(snippets):{}};const getSnippet=name=>{const snippets=getSnippets();if(!Object.keys(snippets).length||!snippets[name])return{code:'',extension:'',enabled:false};return snippets[name]};const getFirstSnippet=()=>{return Object.keys(getSnippets())?.[0]};const createSnippet=(name,extension,enabled)=>{let snippets=getSnippets();try{Object.assign(snippets,{[name]:{code:'',enabled:enabled??false,extension}})}catch(error){makeToast(`Error creating snippet ${name}! Check console for more details.`);return _Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].error */ .Z.error(`Error creating snippet ${name}.`,error)}return writeSnippets(snippets)};const updateSnippet=(name,snippet)=>{let snippets=getSnippets();snippet=Object.assign(getSnippet(name),snippet);try{Object.assign(snippets,{[name]:snippet})}catch(error){makeToast(`Error writing snippet ${name}! Check console for more details.`);return  true||0}return writeSnippets(snippets)};const deleteSnippet=name=>{let snippets=getSnippets();try{delete snippets[name];cleanups[name]?.()}catch(error){makeToast(`Error deleting snippet ${name}! Check console for more details.`);return _Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].error */ .Z.error(`Error deleting snippet ${name}!`,error)}return writeSnippets(snippets)};const renameSnippet=(name,newName)=>{console.log(name,newName);let snippets=getSnippets();try{let index=Object.keys(snippets).indexOf(name);let array=Object.entries(snippets);array.splice(index,1,[newName,snippets[name]]);snippets=Object.fromEntries(array)}catch(error){makeToast(`Error renaming snippet ${name} to ${newName}! Check console for more details.`);return _Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].error */ .Z.error(`Error renaming snippet ${name} to ${newName}!`,error)}return writeSnippets(snippets)};const moveSnippet=(name,index)=>{let snippets=getSnippets();try{let value=snippets[name];let array=Object.entries(snippets).filter(([key])=>key!==name);array.splice(index,0,[name,value]);snippets=Object.fromEntries(array)}catch(error){makeToast(`Error moving snippet ${name}! Check console for more details.`);return _Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].error */ .Z.error(`Error moving snippet ${name}!`,error)}return writeSnippets(snippets)};const runCode=async(name,snippet,silent)=>{let returnValue;try{returnValue=await new Function(`\n        let Logger  = window.cs.logger;\n        let Patcher = window.cs.patcher;\n        let Webpack = window.cs.webpack;\n        let Manager = window.cs.manager;\n\n        return (async () => { ${CodeSnippetsNative.compile(snippet.code,snippet.extension)} })();\n      `)()}catch(error){makeToast(`Error running snippet ${name||'QuickRun'}! Check console for more details.`);return _Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].error */ .Z.error(`Error running snippet ${name||'QuickRun'}!`,error)}silent??makeToast(`Successfully ran ${name||'QuickRun'}!`,true);_Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].info */ .Z.info(`Successfully ran ${name||'QuickRun'}!`,returnValue?'':`Returned: ${returnValue}`);update?.();return returnValue};const injectCSS=(data,id,customNode)=>{const createElement=(options={})=>{return Object.assign(document.createElement('style'),options)};const node=createElement({textContent:data,id:`code-snippets-${id}`});(customNode??document.head).appendChild(node);return node};const runSnippet=async(name,type,silent1)=>{if(!getSnippets()[name])return _Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].warn */ .Z.warn(`Snippet ${name} does not exist!`);const snippet=getSnippet(name);await cleanups[name]?.(true);if(type===ScriptType.CSS){const node=injectCSS(CodeSnippetsNative.compile(snippet.code,snippet.extension),name);cleanups[name]=silent=>{node.remove();delete cleanups[name];if(!silent)makeToast(`Successfully removed CSS for ${name}!`,true);_Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].info */ .Z.info(`Successfully removed CSS for ${name}!`,node);update?.()};if(!silent1)makeToast(`Successfully loaded CSS for ${name}! Check console for node info.`,true);_Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].info */ .Z.info(`Successfuly loaded CSS for ${name}!`,node)}else{const cleanup1=await runCode(name,snippet,silent1);if(typeof cleanup1==='function'){cleanups[name]=async silent=>{let unpatchReturn;try{unpatchReturn=await cleanup1();delete cleanups[name]}catch(error){makeToast(`Error running the cleanup function for ${name}! Check console for more details.`);return _Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].error */ .Z.error(`Error running the cleanup function for ${name}!`,error)}if(!silent)makeToast(`Successfully ran cleanup function for ${name}!`,true);_Logger__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"].info */ .Z.info(`Successfully ran cleanup function for ${name}!`,unpatchReturn&& typeof unpatchReturn!=='function'?'':`Returned: ${unpatchReturn}`);update?.()}}}update?.()};const pullGist=async gist=>{const data=await (await fetch(`https://api.github.com/gists/${gist.id}`)).json();if(data.message)return Promise.reject('Gist does not exist!');const code=data.files[gist.name]?.content??data.files[Object.keys(data.files)[0]]?.content;if(!code)return Promise.reject('Gist does not contain any files!');return code};/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({makeToast,cleanup,setUpdate,getSnippets,getFirstSnippet,getSnippet,getScriptType,backupSnippets,deleteSnippet,moveSnippet,updateSnippet,renameSnippet,createSnippet,runCode,injectCSS,runSnippet,pullGist,ScriptType,get cleanups(){return cleanups}});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1222\n")},647:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"As\": () => (/* binding */ pjoin),\n/* harmony export */   \"Rw\": () => (/* binding */ extensions),\n/* harmony export */   \"VS\": () => (/* binding */ callArgs),\n/* harmony export */   \"_v\": () => (/* binding */ sleep),\n/* harmony export */   \"hI\": () => (/* binding */ cjoin),\n/* harmony export */   \"v_\": () => (/* binding */ join)\n/* harmony export */ });\nconst packagePrefix='code-snippets';const _join=(prefix,classes)=>{return classes.map(value=>`${prefix?`${prefix}-`:''}${Array.isArray(value)?value.join('-'):value}`).join(' ')};const extensions=['js','ts','jsx','css','scss','sass'];function join(...classes){return _join('',classes)}function pjoin(...classes){return`${packagePrefix}-${_join('',classes)}`}function cjoin(prefix){return(...classes)=>{return _join(`${packagePrefix}-${prefix}`,classes)}}function sleep(ms){return new Promise(res=>setTimeout(res,ms))}function callArgs(functions,callMethod){functions.forEach(f=>callMethod?f[callMethod]?.():f?.())}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ3LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRUEsS0FBSyxDQUFDQSxhQUFhLENBQUcsQ0FBZSxlQUVyQyxLQUFLLENBQUNDLEtBQUssRUFBSUMsTUFBYyxDQUFFQyxPQUE4QixHQUFLLENBQUMsTUFDM0QsQ0FBQ0EsT0FBTyxDQUFDQyxHQUFHLENBQUNDLEtBQUssS0FDbkJILE1BQU0sSUFBTUEsTUFBTSxDQUFDLENBQUMsRUFBSSxDQUFFLElBQUdJLEtBQUssQ0FBQ0MsT0FBTyxDQUFDRixLQUFLLEVBQUlBLEtBQUssQ0FBQ0csSUFBSSxDQUFDLENBQUcsSUFBSUgsS0FBSyxJQUM3RUcsSUFBSSxDQUFDLENBQUcsR0FDYixDQUFDLENBRU0sS0FBSyxDQUFDQyxVQUFVLENBQUcsQ0FBQyxDQUFJLElBQUUsQ0FBSSxJQUFFLENBQUssS0FBRSxDQUFLLEtBQUUsQ0FBTSxNQUFFLENBQU0sTUFBQyxDQUU3RCxTQUFTRCxJQUFJLElBQUlMLE9BQU8sQ0FBeUIsQ0FBQyxNQUNqRCxDQUFDRixLQUFLLENBQUMsQ0FBRSxFQUFFRSxPQUFPLENBQzFCLENBRU8sU0FBU08sS0FBSyxJQUFJUCxPQUFPLENBQXlCLENBQUMsTUFDbEQsR0FBSUgsYUFBYSxDQUFDLENBQUMsRUFBRUMsS0FBSyxDQUFDLENBQUUsRUFBRUUsT0FBTyxHQUM5QyxDQUVPLFNBQVNRLEtBQUssQ0FBQ1QsTUFBYyxDQUFFLENBQUMsTUFDL0IsSUFBS0MsT0FBTyxHQUE0QixDQUFDLE1BQ3ZDLENBQUNGLEtBQUssSUFBSUQsYUFBYSxDQUFDLENBQUMsRUFBRUUsTUFBTSxHQUFJQyxPQUFPLENBQ3BELENBQUMsQ0FHSSxTQUFTUyxLQUFLLENBQUNDLEVBQVUsQ0FBRSxDQUFDLE1BQzNCLENBQUMsR0FBRyxDQUFDQyxPQUFPLENBQUNDLEdBQUcsRUFBSUMsVUFBVSxDQUFDRCxHQUFHLENBQUVGLEVBQUUsRUFDOUMsQ0FFTyxTQUFTSSxRQUFRLENBQUNDLFNBQXFCLENBQUVDLFVBQW1CLENBQU8sQ0FBQyxTQUNoRSxDQUFDQyxPQUFPLENBQUNDLENBQUMsRUFBSUYsVUFBVSxDQUFHRSxDQUFDLENBQUNGLFVBQVUsTUFBUUUsQ0FBQyxLQUMzRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9yZW5kZXJlci9tb2R1bGVzL1V0aWxpdGllcy50c3g/ODVlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBUaGUgYmVsb3cgY29kZSBpcyBsaWNlbnNlZCB1bmRlciBNSVQuICovXG5cbmNvbnN0IHBhY2thZ2VQcmVmaXggPSAnY29kZS1zbmlwcGV0cyc7XG5cbmNvbnN0IF9qb2luID0gKHByZWZpeDogc3RyaW5nLCBjbGFzc2VzOiAoc3RyaW5nIHwgc3RyaW5nW10pW10pID0+IHtcbiAgcmV0dXJuIGNsYXNzZXMubWFwKHZhbHVlID0+IChcbiAgICBgJHtwcmVmaXggPyBgJHtwcmVmaXh9LWAgOiAnJ30ke0FycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLScpIDogdmFsdWV9YFxuICApKS5qb2luKCcgJyk7XG59O1xuXG5leHBvcnQgY29uc3QgZXh0ZW5zaW9ucyA9IFsnanMnLCAndHMnLCAnanN4JywgJ2NzcycsICdzY3NzJywgJ3Nhc3MnXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGpvaW4oLi4uY2xhc3NlczogKHN0cmluZyB8IHN0cmluZ1tdKVtdKSB7XG4gIHJldHVybiBfam9pbignJywgY2xhc3Nlcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwam9pbiguLi5jbGFzc2VzOiAoc3RyaW5nIHwgc3RyaW5nW10pW10pIHtcbiAgcmV0dXJuIGAke3BhY2thZ2VQcmVmaXh9LSR7X2pvaW4oJycsIGNsYXNzZXMpfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjam9pbihwcmVmaXg6IHN0cmluZykge1xuICByZXR1cm4gKC4uLmNsYXNzZXM6IChzdHJpbmcgfCBzdHJpbmdbXSlbXSkgPT4ge1xuICAgIHJldHVybiBfam9pbihgJHtwYWNrYWdlUHJlZml4fS0ke3ByZWZpeH1gLCBjbGFzc2VzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNsZWVwKG1zOiBudW1iZXIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlcyA9PiBzZXRUaW1lb3V0KHJlcywgbXMpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGxBcmdzKGZ1bmN0aW9uczogRnVuY3Rpb25bXSwgY2FsbE1ldGhvZD86IHN0cmluZyk6IGFueSB7XG4gIGZ1bmN0aW9ucy5mb3JFYWNoKGYgPT4gY2FsbE1ldGhvZCA/IGZbY2FsbE1ldGhvZF0/LigpIDogZj8uKCkpO1xufTsiXSwibmFtZXMiOlsicGFja2FnZVByZWZpeCIsIl9qb2luIiwicHJlZml4IiwiY2xhc3NlcyIsIm1hcCIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5Iiwiam9pbiIsImV4dGVuc2lvbnMiLCJwam9pbiIsImNqb2luIiwic2xlZXAiLCJtcyIsIlByb21pc2UiLCJyZXMiLCJzZXRUaW1lb3V0IiwiY2FsbEFyZ3MiLCJmdW5jdGlvbnMiLCJjYWxsTWV0aG9kIiwiZm9yRWFjaCIsImYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///647\n")}}]);